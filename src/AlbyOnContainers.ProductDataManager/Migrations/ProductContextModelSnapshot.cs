// <auto-generated />
using System;
using AlbyOnContainers.ProductDataManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AlbyOnContainers.ProductDataManager.Migrations
{
    [DbContext(typeof(ProductContext))]
    partial class ProductContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.CategoryAttrTypes", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttrTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId", "AttrTypeId");

                    b.HasIndex("AttrTypeId");

                    b.ToTable("CategoryAttrTypes");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.CategoryDescrTypes", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescrTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId", "DescrTypeId");

                    b.HasIndex("DescrTypeId");

                    b.ToTable("CategoryDescrTypes");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Attr", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.Property<Guid>("AttrTypeId")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasIndex("AttrTypeId");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Attr");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.AttrType", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.HasDiscriminator().HasValue("AttrType");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Category", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.Property<Guid?>("ParentId")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Descr", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.Property<Guid>("DescrDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("DescrDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable(t =>
                        {
                            t.Property("ProductId")
                                .HasColumnName("Descr_ProductId");
                        });

                    b.HasDiscriminator().HasValue("Descr");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.DescrType", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.HasDiscriminator().HasValue("DescrType");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.DescrValue", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.Property<Guid>("DescrTypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("DescrTypeId");

                    b.HasDiscriminator().HasValue("DescrValue");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Product", b =>
                {
                    b.HasBaseType("AlbyOnContainers.ProductDataManager.Models.Abstract.Entity");

                    b.Property<Guid?>("CategoryId")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.CategoryAttrTypes", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.AttrType", "AttrType")
                        .WithMany("CategoryAttrTypes")
                        .HasForeignKey("AttrTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AttrType_CategoryAttrTypes");

                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.Category", "Category")
                        .WithMany("CategoryAttrTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Category_CategoryAttrTypes");

                    b.Navigation("AttrType");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.CategoryDescrTypes", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.Category", "Category")
                        .WithMany("CategoryDescrTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Category_CategoryDescrTypes");

                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.DescrType", "DescrType")
                        .WithMany("CategoryDescrTypes")
                        .HasForeignKey("DescrTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DescrType_CategoryDescrTypes");

                    b.Navigation("Category");

                    b.Navigation("DescrType");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Attr", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.AttrType", "AttrType")
                        .WithMany("Attrs")
                        .HasForeignKey("AttrTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AttrType_Attrs");

                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.Product", "Product")
                        .WithMany("Attrs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_attr_products");

                    b.Navigation("AttrType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Category", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.Category", "Parent")
                        .WithMany("Categories")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_category_categories");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Descr", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.DescrValue", "DescrValue")
                        .WithMany("Descrs")
                        .HasForeignKey("DescrDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DescrValue_Descrs");

                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.Product", "Product")
                        .WithMany("Descrs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_descr_products");

                    b.Navigation("DescrValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.DescrValue", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.DescrType", "DescrType")
                        .WithMany("DescrValues")
                        .HasForeignKey("DescrTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DescrType_DescrValues");

                    b.Navigation("DescrType");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Product", b =>
                {
                    b.HasOne("AlbyOnContainers.ProductDataManager.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_product_categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.AttrType", b =>
                {
                    b.Navigation("Attrs");

                    b.Navigation("CategoryAttrTypes");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("CategoryAttrTypes");

                    b.Navigation("CategoryDescrTypes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.DescrType", b =>
                {
                    b.Navigation("CategoryDescrTypes");

                    b.Navigation("DescrValues");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.DescrValue", b =>
                {
                    b.Navigation("Descrs");
                });

            modelBuilder.Entity("AlbyOnContainers.ProductDataManager.Models.Product", b =>
                {
                    b.Navigation("Attrs");

                    b.Navigation("Descrs");
                });
#pragma warning restore 612, 618
        }
    }
}
